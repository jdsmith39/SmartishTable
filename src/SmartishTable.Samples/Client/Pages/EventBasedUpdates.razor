@page "/EventBasedUpdates"
@using SmartishTable.Samples.Shared
@inject HttpClient Http

<h2 @onclick="(() => StateHasChanged())">SmartishTable Samples - Event Based Table Updates</h2>

<div class="form-group form-row">
  <label for="count" class="col-form-label">
    Select List Count
  </label>
  <div class="col-sm">
    <select @bind="counter.Count" id="count" type="text" class="form-control">
      <option value="0">0</option>
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
    </select>
  </div>
</div>

<SmartishTable.Root SafeList="list" HeaderTag="div">
  <div class="form-row">
    <SmartishTable.Sort Field="o=>o.LastName" IsDefaultSort="true" Css="col-md-4 canSelect">Last Name</SmartishTable.Sort>
    <SmartishTable.Sort Field="o=>o.FirstName" Css="col-md-4 canSelect">First Name</SmartishTable.Sort>
    <SmartishTable.Sort Field="o=>o.Email" Css="col-md-4 canSelect">Email</SmartishTable.Sort>
    <SmartishTable.Repeater Context="row">
      <div class="col-12 col-md-6 col-lg-4 col-xl-3 mb-2">
        <div class="card h-100">
          <div class="card-header">
            @row.Item.Id @row.Item.FirstName @row.Item.LastName
          </div>
          <div class="card-body">
            <div class="hover">Birth Date: @row.Item.BirthDate.ToShortDateString()</div>
            <div class="hover">City: @row.Item.City</div>
            <div class="hover">Company: @row.Item.Company</div>
            <div class="hover">Country: @row.Item.Country</div>
            <div class="hover">Dependents: @row.Item.Dependents</div>
            <div class="hover">Email: @row.Item.Email</div>
            <div class="hover">Gender: @row.Item.Gender</div>
            <div class="hover">Income: @row.Item.Income</div>
            <div class="hover">Active: @row.Item.IsActive</div>
            <div class="hover">Job Title: @row.Item.JobTitle</div>
          </div>
        </div>
      </div>
    </SmartishTable.Repeater>
  </div>
</SmartishTable.Root>
Count: @list?.Count
@code {
    private List<Person> list;

    private Counter counter = new Counter();

    protected override async Task OnInitializedAsync()
    {
      counter.PropertyChanged += Count_Changed;
    }

    protected async void Count_Changed(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        list = await Http.GetFromJsonAsync<List<Person>>($"People/Some/{counter.Count}");
        // has to be called, because this is a property changed event, blazor does not know something changed.
        StateHasChanged();
    }
}