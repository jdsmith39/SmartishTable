@page "/DictionaryRowData"
@inject HttpClient Http

<h2>SmartishTable Samples - Dictionary Row Data</h2>

@if (list == null || keys == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <SmartishTable.Root SafeList="list">
        <table class="table table-condensed table-striped">
            <thead>
                <tr>
                    @foreach (var item in keys)
                {
                    <SmartishTable.Sort TItem="Dictionary<string,JsonElement>" Field="o=>o[item]" Css="col-md-4 canSelect" Comparer="jsonElementComparer">@item</SmartishTable.Sort>
                }
            </tr>
            <tr>
                @foreach (var item in keys)
                {
                    <td>
                        <FilterJsonElementString Context="filterContext" PropertyName="@item">
                            <input type="text" @bind-value="@filterContext.FilterValue" @bind-value:event="oninput" class="form-control form-control-sm" />
                        </FilterJsonElementString>
                       @* @switch (firstRow[item].ValueKind)
                        {
                            case JsonValueKind.Undefined:
                            case JsonValueKind.Object:
                            case JsonValueKind.Array:
                                break;
                            case JsonValueKind.String:
                                stringOperators[item] = Filters.StringOperators.Contains;
                                <text>
                                    <select @bind="stringOperators[item]" class="form-control form-control-sm">
                                        @foreach (var enumItem in SmartishTable.Filters.StringOperators.Equals.GetList())
                                        {
                                            <option value="@enumItem">@enumItem.GetDisplayName()</option>
                                        }
                                    </select>
                                    <SmartishTable.FilterString TItem="Dictionary<string,JsonElement>" Field="x=>x[item].GetString()" Context="filterContext" Operator="stringOperators[item]">
                                        <input type="text" @bind-value="@filterContext.FilterValue" @bind-value:event="oninput" class="form-control form-control-sm" />
                                    </SmartishTable.FilterString>
                                </text>
                                break;
                            case JsonValueKind.Number:
                                numericOperators[item] = Filters.NumericOperators.GreaterThanOrEqual;
                                <text>
                                    <select @bind="numericOperators[item]" class="form-control form-control-sm">
                                        @foreach (var enumItem in SmartishTable.Filters.NumericOperators.Equals.GetList())
                                        {
                                            <option value="@enumItem">@enumItem.GetDisplayName()</option>
                                        }
                                    </select>
                                    <SmartishTable.FilterNumeric TItem="Dictionary<string,JsonElement>" Field="x=>x[item]" Context="filterContext" Operator="numericOperators[item]" FilterType="decimal?">
                                        <input type="number" @bind-value="@filterContext.FilterValue" @bind-value:event="oninput" class="form-control form-control-sm" />
                                    </SmartishTable.FilterNumeric>
                                </text>
                                break;
                            case JsonValueKind.True:
                            case JsonValueKind.False:
                                booleanOperators[item] = Filters.BooleanOperators.Equals;
                                <text>
                                    <select @bind="booleanOperators[item]" class="form-control form-control-sm">
                                        <option value="@SmartishTable.Filters.BooleanOperators.Equals">All</option>
                                        @foreach (var enumItem in SmartishTable.Filters.BooleanOperators.Equals.GetList().Where(w => ((byte)w) > 8))
                                        {
                                            <option selected="@(booleanOperators[item] == enumItem)" value="@enumItem">@enumItem.GetDisplayName()</option>
                                        }
                                    </select>
                                    <SmartishTable.FilterBoolean TItem="Dictionary<string,JsonElement>" Field="x=>x[item]" Operator="booleanOperators[item]"></SmartishTable.FilterBoolean>
                                </text>
                                break;
                            case JsonValueKind.Null:
                                break;
                        }*@
                    </td>
                }
            </tr>
        </thead>
        <tbody>
            <SmartishTable.Repeater TItem="Dictionary<string,JsonElement>" Context="row">
                <tr>
                    @foreach (var item in keys)
                    {
                        <td>@row.Item[item]</td>
                    }
                </tr>
            </SmartishTable.Repeater>
        </tbody>
        <tfoot>
            <tr>
                <td colspan="12">
                    <SmartishTable.Pagination Context="Pager">
                        <SmartishTablePager Paginator="Pager" DefaultPageSize="10"></SmartishTablePager>
                    </SmartishTable.Pagination>
                </td>
            </tr>
        </tfoot>
    </table>
</SmartishTable.Root>
}
@using System.Text.Json
@using System.Reflection
@code {
    private List<Dictionary<string, JsonElement>> list;
    private Dictionary<string, JsonElement> firstRow;
    private List<string> keys;
    private PropertyInfo[] properties;
    private Dictionary<string, SmartishTable.Filters.StringOperators> stringOperators = new Dictionary<string, Filters.StringOperators>();
    private Dictionary<string, SmartishTable.Filters.BooleanOperators> booleanOperators = new Dictionary<string, Filters.BooleanOperators>();
    private Dictionary<string, SmartishTable.Filters.NumericOperators> numericOperators = new Dictionary<string, Filters.NumericOperators>();
    private JsonElementComparer jsonElementComparer = new JsonElementComparer();

    protected override async Task OnInitializedAsync()
    {
        list = await Http.GetFromJsonAsync<List<Dictionary<string, JsonElement>>>("People/Some/50");
        firstRow = list.FirstOrDefault();
        keys = firstRow?.Keys?.ToList();
    }

    public class JsonElementComparer : IComparer<object?>
    {
        public int Compare(object? xx, object? yy)
        {
            if (xx == null && yy == null)
                return 0;

            if (xx == null && yy != null)
                return 1;
            if (xx != null && yy == null)
                return -1;

            var x = (JsonElement?)xx;
            var y = (JsonElement?)yy;

            if (x.Value.ValueKind != JsonValueKind.Null && y.Value.ValueKind == JsonValueKind.Null)
                return -1;

            switch (x.Value.ValueKind)
            {
                case JsonValueKind.Undefined:
                    break;
                case JsonValueKind.Object:
                    break;
                case JsonValueKind.Array:
                    break;
                case JsonValueKind.String:
                    return string.Compare(x.Value.GetString(), y.Value.GetString(), true);
                case JsonValueKind.Number:
                    var xDouble = x.Value.GetDouble();
                    var yDouble = y.Value.GetDouble();
                    if (xDouble < yDouble)
                        return -1;
                    else if (xDouble > yDouble)
                        return 1;
                    return 0;
                case JsonValueKind.True:
                case JsonValueKind.False:
                    var xBool = x.Value.GetBoolean();
                    var yBool = y.Value.GetBoolean();
                    if (xBool == yBool)
                        return 0;
                    else if (xBool && !yBool)
                        return 1;
                    return -1;
                case JsonValueKind.Null:
                    if (y.Value.ValueKind == JsonValueKind.Null)
                        return 0;
                    return 1;
            }
            return 0;
        }
    }
}